image:

stages:
  - Build
  - Static Application Security Testing
  - Dynamic Application Security Testing
  - Source Composition Analysis
  - Deploy
  
 services:
  - docker:dind
  
build:
  imagem: docker:latest
  stage: Build
  
  variables:
    IMAGE: ${CI_REGISTRY_USER}/simpleapp:latest
  
  script:
  - "docker build -t ${CI_REGISTRY_USER}/simpleapp:latest ."
  - "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}"
  - "docker push ${CI_REGISTRY_USER}/simpleapp:latest"
  
  
 owasp:
  image: docker:latest
  stage: Dynamic Application Security Testing
  
  scrip:
   - echo 'hello!'
   - docker run -t owasp/zap2docker-stable zap-baseline.py -t ${URL2}
   allow_failure: true
 
deploy:
  image: ubuntu:latest
  stage: Deploy
  
  script:
    - 'echo "Building docker!"'
    - apt-get update -qq
    - which ssh-agent || ( apt-get isntall -qq openssh-client )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - [[ -f /.dockerenv ]] && echo -e "Host *\n\tStricHostKeyChecking no\n\n" > ~/.ssh/config'
    
    - echo "Deploy project on server"
    - ssh $DEPLOY_HOST "docker pull ${CI_REGISTRY_USER}/simpleapp:latest"
    - ssh $DEPLOY_HOST "docker stop app3"
    - ssh $DEPLOY_HOST "docker run --rm -d --name app3 -p $APP_PORT ${CI_REGISTRY_USER}/simpleapp:latest"
    
bendit:
  stage: Static Application Security Testing
  script:
    - pip install -r requirements.txt
    - pip install bandit
    - 'bandit -r app.py'
   artifacts:
    paths: [bandit-output.txt]
   allow_failure: true
   
synk:
  stage: Static Application Security Testing
  script:
    - pip install -r requirements.txt
    - wget https://github.com/snyk/releases/download/v1.204.0/snyk-linux
    - mv snyk-linux snyk &&& chmod +x synk
    - ./synk test --json > snyk-results.json
   artifacts:
    when: always
    paths:
      - snyk-results.json
    allow_failure: true
    
dependencycheck:
  stage: Source Composition Analysis
  script:
    - pip install safety
    - safety check -r requirements.txt --json > safety-results.json
  artifacts:
    paths: [safety-results.json]
    when: always
  
